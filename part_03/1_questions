
Answer the following questions


1) What is an instance variable?
- A variable that describes the class itself.
- A variable that is defined at the class level, before any method.

2) How do you create a new object? First have a class type followed by a variable on the left side then an equal sign,
then put "new" in front of the class type, followed by two parentheses and a semicolon.
- ClassName variableName = new ClassName();
- Car andreaCar = new Car();

3) After creating a new object, how do you set that objects instance variables? Two ways.
-1. objectName.variableName = value;
    - andreaCar.color = "blue";
-2. use a setter method
    - andreaCar.setColor("blue");

4) What is a reference variable? Why do you need to be careful with reference variables?
A reference variable is an object. When you pass an object (from methodA) to another method (methodB) as an argument,
methodB does not get it's own copy of the object, it gets a reference to object. In this case, the object in both
methodA and methodB are pointing to the same exact place/object in memory. Any change that happens to the object
(reference variable) in methodB will carry over to the object in methodA regardless of whether or not methodB returns
that object to methodA.

5) How many methods can you have in a class?
-More or less infinite (only bound by largest int 2,147,483,647)

6) How do you exit a method at any point?
-If it's a void method, use "return";
-If the method has non-void return type, use "return <variable of returnType>"
    -ie, return a * b;

7) What is the method signature required to return an "int" from a method?
- public int someMethod(<optional args>) { ... }
- public int multiply(int a, int b){ ... }
    -this method takes two arguments as parameters and returns an int which is the result of multiplying 2 parameters
int x = objectName.multiply(2,3); // x now equals 6

8) Assuming "int num = 10", what is the syntax to return "num" from a method?
- "return num;"

9) How do you pass a parameter to a method?
-You pass parameters to method (that require parameters) in the parentheses
-ie, int x = objectName.multiply(10, 20);
    - "10" and "20" in the line above are parameters being passed to the multiply method (which requires 2 parameters)

10) What is the method signature for a method named sum() that takes two int parameters
    and returns their sum as in int?
    public int sum(int a, int b){}
    int x = sum(8,9);

11) What is a constructor?
-A constructor is invoked/used when the "new" keyword is used
-Constructors create objects
-If you do not define a custom constructor, Java will provide a default (blank) constructor for you

12) How does Java treat a class without a constructor?
    class Painting{
    Painting(){} // <- default constructor - java creates this behind the scenes if you do not create

13) What would the constructor for "public class Animal" look like?
    public Animal(){}

14) What is the effect of passing parameters to a constructor?
    class Car  {
      String color;
      String model;

      Car(String color, String model){
          this.color = color;
          this.model = model;
      }
   }

   // some other class
   Car myCar = new Car("Yellow", "Mustang");

   //without parameterized constructor you would have to:
   Car myCar = new Car();
   myCar.color = "Yellow";
   myCar.model = "Mustang";

15) When should you pass parameters to a constructor?
-If the constructor requires parameters
-If you're writing the constructor and you want to be able to set the instance variables in the constructor or set
 other variables or do some other task as soon as the object is created
-Car myCar = new Car("Yellow", "Mustang");

16) What does the finalize() method do?
-The finalize() method is called immediately before an object is destroyed.
-It's useful for closing connections to open files, network connections, databases, etc.

17) What does the "this" keyword do?
class Car {
    String color; // <- this.color
    String model; // <- this.model

    Car(String color 123, String model123){
    this.color = color;
    this.model = model;
    }
}

18) When should you use the "this" keyword?
-You should use the "this" keyword (usually in the constructor when you have a naming conflict between the instance
variable (ie, color) and the constructor parameter (ie, color)

class Car extends Automobile{
        String color; // <-this.color
        String.model; // <-this.model

19) Write an example of the "this" keyword in action.


20) Explain the difference between static and non-static variables.
- A static variable is shared by all instances of a class - for instance "numCarsCreated" - if that's a static variable,
each and every object created from Car class has shared access to that variable - if that variable currently holds "4"
then each and every object created from the Car class can tell you that variable currently holds "4." Static variables
are shared across all instances of a class - no matter how many objects/instances you create of that class.
- A non-static variable belongs to the instance/object - for instance, birthday is a great example of a non-static
variable- because each instance/object of the Person class should have their own copy of that variable that they can
modify and change accordingly based on their individual birthday. Phone number, PO BOX, street address, email address -
there are all non-static variables that should not be shared across every instance/object of the Person class that has
been created.

21) Explain the difference between static and non-static methods.
-A non-static method can only be accessed (from another class) by creating an object of the class containing the
non-static method and using that object to call the non-static method. For instance, assume the Car class has a
non-static method called accelerate().
    Car myNewCar = new Car();
    myNewCar.accelerate(); // <- using the object "myNewCar" to invoke the method "accelerate"
    objectName.methodName()
-A static method is required when you need to call a method inside a class before an object of that class has been or
can be created. For instance the main() method. The JVM does not create a new object of your class to call the main()
method. It simply calls it using "ClassName.main();"